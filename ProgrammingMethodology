<mxfile host="app.diagrams.net" modified="2021-10-20T01:46:35.757Z" agent="5.0 (Windows)" etag="-NBipcv3icy7BWqO2AJe" version="15.5.2" type="github" pages="2">
  <diagram id="zQ4-V3rjiliO4CggKamS" name="Page-1">
    <mxGraphModel dx="1422" dy="780" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-3" value="Karel The Robot Class Diagram&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="240" y="160" width="320" height="40" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-9" value="Karel" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;" parent="1" vertex="1">
          <mxGeometry x="310" y="200" width="170" height="164" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-10" value="- beeperBag : Beeper" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="WEfxWDvdRRLfGt2QhUMX-9" vertex="1">
          <mxGeometry y="26" width="170" height="26" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-11" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;" parent="WEfxWDvdRRLfGt2QhUMX-9" vertex="1">
          <mxGeometry y="52" width="170" height="8" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-12" value="+ move(Void): Void&#xa;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="WEfxWDvdRRLfGt2QhUMX-9" vertex="1">
          <mxGeometry y="60" width="170" height="26" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-18" value="+ turnLeft(Void): Void&#xa;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="WEfxWDvdRRLfGt2QhUMX-9" vertex="1">
          <mxGeometry y="86" width="170" height="26" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-19" value="+ pickBeeper(Beeper): Void&#xa;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="WEfxWDvdRRLfGt2QhUMX-9" vertex="1">
          <mxGeometry y="112" width="170" height="26" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-20" value="+ putBeeper(Beeper): Beeper&#xa;" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" parent="WEfxWDvdRRLfGt2QhUMX-9" vertex="1">
          <mxGeometry y="138" width="170" height="26" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-22" value="" style="labelPosition=right;align=left;strokeWidth=1;shape=mxgraph.mockup.markup.curlyBrace;html=1;shadow=0;dashed=0;strokeColor=#999999;direction=north;" parent="1" vertex="1">
          <mxGeometry x="280" y="260" width="20" height="100" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-23" value="Methods(+)" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="230" y="300" width="40" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-24" value="" style="labelPosition=right;align=left;strokeWidth=1;shape=mxgraph.mockup.markup.curlyBrace;html=1;shadow=0;dashed=0;strokeColor=#999999;direction=north;" parent="1" vertex="1">
          <mxGeometry x="280" y="230" width="20" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-25" value="Attributes(-)" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="230" y="230" width="40" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-26" value="Java" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;" parent="1" vertex="1">
          <mxGeometry x="380" y="400" width="40" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-31" value="For Loop" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="310" y="430" width="170" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-32" value="" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="310" y="450" width="170" height="60" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-29" value="&lt;div align=&quot;left&quot;&gt;for ( int i=0; i&amp;lt;3; i++){&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; turnLeft();&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;}&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="310" y="450" width="170" height="60" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-35" value="While Loop" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="310" y="530" width="170" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-36" value="&lt;div align=&quot;left&quot;&gt;while(&amp;nbsp; frontIsClear() ){&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; move();&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;}&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="310" y="550" width="170" height="60" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-37" value="IF statement" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="310" y="630" width="170" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-38" value="&lt;div&gt;if (&amp;nbsp; beepersPresent() ){&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pickBeeper();&lt;br&gt;&lt;/div&gt;&lt;div&gt;} else {&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; putBeeper();&lt;br&gt;&lt;/div&gt;&lt;div&gt;}&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;" parent="1" vertex="1">
          <mxGeometry x="310" y="650" width="170" height="80" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-39" value="Common Errors" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="310" y="760" width="170" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-40" value="&lt;div align=&quot;left&quot;&gt;1. infinite loop&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;2. off by one bug&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;3. &lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="780" width="140" height="80" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-41" value="&lt;div align=&quot;left&quot;&gt;1. Write text using programming language called java&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;2. text files have an extension .java&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;3.&amp;nbsp; *.java file express what you want to do&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;4.&amp;nbsp; *.java get converted into binary( *.class files are created for each class inside a *.java file)&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;resizable=0;points=[];autosize=1;" parent="1" vertex="1">
          <mxGeometry x="440" y="880" width="520" height="60" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-43" value="&lt;div&gt;Text&lt;/div&gt;&lt;div&gt;*.java&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="320" y="880" width="60" height="60" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-45" value="" style="endArrow=classic;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" parent="1" source="WEfxWDvdRRLfGt2QhUMX-43" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="350" y="1030" as="sourcePoint" />
            <mxPoint x="350" y="1000" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-46" value="Javac(JDK)" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="355" y="960" width="70" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-47" value="Javac is computer program part of the JDK that converts*.java files in binary (*.class files)" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="440" y="960" width="260" height="40" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-48" value="" style="endArrow=none;dashed=1;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="WEfxWDvdRRLfGt2QhUMX-46" target="WEfxWDvdRRLfGt2QhUMX-47" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="530" y="1030" as="sourcePoint" />
            <mxPoint x="580" y="980" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-49" value="&lt;div&gt;Binary&lt;br&gt;*.class&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="320" y="1000" width="60" height="60" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-50" value="&lt;div&gt;Computer &lt;br&gt;&lt;/div&gt;&lt;div&gt;Program&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="320" y="1110" width="60" height="60" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-51" value="" style="endArrow=classic;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="WEfxWDvdRRLfGt2QhUMX-49" target="WEfxWDvdRRLfGt2QhUMX-50" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="380.24" y="1070" as="sourcePoint" />
            <mxPoint x="380" y="1130" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-52" value="JVM(Java Virtual Machine)" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="360" y="1070" width="150" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-53" value="&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;JVM is part of the JRE(Java Runtime Environment).&amp;nbsp; JRE runs the JVM, which in turn runs the binary *.class files.&lt;br&gt;&lt;/div&gt;&lt;div&gt;*.class files are then ran by the JVM.&amp;nbsp; why use virtual machine? because we can guarantee the program runs in the same environment every time, despite being in varying PC or Mac.&lt;/div&gt;&lt;div&gt;&lt;br&gt; &lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="520" y="1080" width="370" height="80" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-54" value="" style="endArrow=none;dashed=1;html=1;entryX=0;entryY=0.25;entryDx=0;entryDy=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" parent="1" source="WEfxWDvdRRLfGt2QhUMX-52" target="WEfxWDvdRRLfGt2QhUMX-53" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="440" y="1170" as="sourcePoint" />
            <mxPoint x="490" y="1120" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-55" value="&lt;div align=&quot;left&quot;&gt;&lt;b&gt;Java has eight primitive types:&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;int -&lt;/b&gt; by default, the &lt;i&gt;int &lt;/i&gt;data type is an 32-bit signed two&#39;s complement integer.&amp;nbsp; Its min value is -2^31 and max value is 2^31-1.&amp;nbsp; In Java 8 and later you &lt;i&gt;int &lt;/i&gt;to represent unsigned 32-bit integer, which as a min value of 0 and max value of 2^32-1.&amp;nbsp; Use the integer class to use the &lt;i&gt;int &lt;/i&gt;data type as unsigned integer. &lt;br&gt;&lt;b&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;short &lt;/b&gt;- The &lt;i&gt;short&lt;/i&gt; data type is 16bit signed two&#39;s complement integer, which has a min value of -32,768 and max of 32,767.&amp;nbsp; The &lt;i&gt;short &lt;/i&gt;data type can be useful for saving memory&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;long &lt;/b&gt;- The &lt;i&gt;long &lt;/i&gt;data type is 64-bit unsigned two&#39;s complement integer, which has a min value of -2^63 and max value of 2^63-1. In Java SE 8 and later, you can also use &lt;i&gt;long &lt;/i&gt;data type as unsigned, which has min value of 0 and max value of 2^64-1.&amp;nbsp; Use this data type when then range of values is wider than &lt;i&gt;int&lt;/i&gt;.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;double &lt;/b&gt;- The &lt;i&gt;double &lt;/i&gt;data type is a double-precision 64-bit IEEE floating point.&amp;nbsp; For decimal value this data type is generally the default choice.&amp;nbsp; For precision this data type should be avoided...ie currency.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;float &lt;/b&gt;- The &lt;i&gt;float &lt;/i&gt;data&amp;nbsp;&lt;i&gt; &lt;/i&gt;type is a 32-bit IEEE 754 floating point.&amp;nbsp; It should never be used for precision, such as currency.&amp;nbsp; Use &lt;i&gt;float&lt;/i&gt; over &lt;i&gt;double&lt;/i&gt; if you need to save memory in large arrays of floating numbers. &lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;char &lt;/b&gt;- The &lt;i&gt;char &lt;/i&gt;data type is a single 16-bit Unicode character.&amp;nbsp; It has minimum value of &#39;\u0000&#39; (or 0)&lt;br&gt;and maximum value of &#39;\uffff&#39; (or 65, 535 inclusive).&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;boolean &lt;/b&gt;- The &lt;i&gt;boolean &lt;/i&gt;data type is has only two possible values: &lt;i&gt;true&lt;/i&gt; or &lt;i&gt;false&lt;/i&gt;. Use this data type for simple flags that tracks true/false conditions.&amp;nbsp; This data type represents one bit of information, but its &#39;size&#39; isn&#39;t something that&#39;s precisely defined. &lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;byte &lt;/b&gt;- is 8-bit signed two&#39;s complement integer. The smallest value is -128, and largest is 127 (inclusive).&amp;nbsp; The byte data type can be useful for saving memory.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="1260" width="590" height="270" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-56" value="&lt;div&gt;In addition to the 8 primitives, the Java programming language also provides special support for character strings via the &lt;b&gt;java.lang.String &lt;/b&gt;class.&amp;nbsp; Enclosing your characters within double quote will automatically create a new &lt;b&gt;String&lt;/b&gt; object.&lt;/div&gt;&lt;div&gt;for example, &lt;i&gt;String s = &quot;this is a string&quot; ;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;String objects are immutable.&lt;/div&gt;&lt;div&gt;The String object is not considered a primitive data type but given the special support it receives from the language you might consider it is. &lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="1630" width="590" height="20" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-57" value="&lt;div&gt;&lt;b&gt;Java Classes and Objects&lt;/b&gt;&lt;/div&gt;&lt;div&gt;in Java there can only be only&amp;nbsp; one public class in each .java file, however we can have as many private class as desired.&amp;nbsp; The java class name will correspond with the file .java file name.&amp;nbsp; IE Fruit class will have Fruit.java file.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Classes can contain 2 things.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Data - which is the current state of the object.&lt;/div&gt;&lt;div&gt;2. Subroutines (methods) - or behaviors&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We call data in a Class Instances variables(Data or &quot;state&quot;)&lt;/div&gt;&lt;div&gt;We call subroutines in a class a method&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;fontStyle=0" parent="1" vertex="1">
          <mxGeometry x="320" y="1720" width="580" height="200" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-58" value="&lt;div align=&quot;left&quot;&gt;&lt;b&gt;Java is pass-by-value language&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;Java is always &lt;strong&gt;pass-by-value&lt;/strong&gt;.  Unfortunately, when we deal with objects we are really dealing with object-handles called &lt;em&gt;references&lt;/em&gt; which are passed-by-value as well.  This terminology and semantics easily confuse many beginners.&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="1960" width="660" height="100" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-59" value="&lt;div align=&quot;left&quot;&gt;&lt;b&gt;Java Class Constructors&lt;/b&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Constructors are special public methods that run every time instance of the class is created, and has no return type. &lt;br&gt;&lt;/li&gt;&lt;li&gt;Constructor name are the same as its&#39; class name, &lt;br&gt;&lt;/li&gt;&lt;li&gt;We can have multiple Constructors, because Constructors can have parameters.&amp;nbsp; Although the constructor have the same name, as long as the parameters differes, Java will be able to automatically recognize with Constructor to use base our the parameter signature(Neat!)&lt;/li&gt;&lt;li&gt;We can also call Constructors within Constructors&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;b&gt;Why use Constructors?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;often used to initialize instance variables&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="2080" width="440" height="190" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-60" value="&lt;div&gt;&lt;b&gt;static vs instance&lt;/b&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;static variables/method are Class variables/method.&amp;nbsp; Instances do not have copy of the static variable, they get access to them through the class.&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;static variable and method belong to the class.&amp;nbsp; static method and variable can access other static variable/method but not instance variable or method&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;What do we use static for?&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;If we don&#39;t deal with instance data, than we can make it a static variable/method&lt;/li&gt;&lt;li&gt;If have constant data(..use final(java&#39;s modified for constant) and static)&lt;br&gt;&lt;/li&gt;&lt;li&gt;if we want data/methods to be shared across all class instances&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="2300" width="530" height="250" as="geometry" />
        </mxCell>
        <mxCell id="WEfxWDvdRRLfGt2QhUMX-61" value="&lt;div align=&quot;left&quot;&gt;&lt;b&gt;StringBuilder&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Strings are immutable&lt;/div&gt;&lt;div&gt;2. Use string builder to be more efficient when constructing a string &lt;br&gt;&lt;/div&gt;&lt;div&gt;3. StringBuilder returns a reference to itself, which means we can use method chaining when building the string&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Use &lt;b&gt;StringBuffer &lt;/b&gt;-- which is the same as &lt;b&gt;StringBuilder&lt;/b&gt; but thread safe&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="2520" width="500" height="170" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-1" value="&lt;div&gt;&lt;b&gt;All objects with Java have the Object class as their ultimate parent&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&amp;nbsp;- therefore you will notice you objects will inherit a lot of methods..for example the toString() method&lt;br&gt;&lt;/b&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="2700" width="530" height="70" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-2" value="&lt;div align=&quot;left&quot;&gt;&lt;b&gt;Inheritance&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Java uses the keyword &quot;extends&quot; for inheritance.&lt;/div&gt;&lt;div&gt;most classes your can extends except for classes that are &quot;final&quot;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;private - only accessible in Class&lt;/li&gt;&lt;li&gt;protected - only accessible in Class and sub-classes&lt;/li&gt;&lt;li&gt; &lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Packages&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;enable you to organize your code&lt;/li&gt;&lt;li&gt;stop conflicts between&amp;nbsp; class names. &lt;br&gt;&lt;/li&gt;&lt;li&gt;package name are all lower case no space or special character by convention.&lt;/li&gt;&lt;li&gt;package statement must come first in the file&lt;/li&gt;&lt;li&gt;import to use package&lt;/li&gt;&lt;li&gt;reverse website name for package name -- com.mywebsite&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Interfaces&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;key word &lt;b&gt;implements&lt;/b&gt;&lt;/li&gt;&lt;li&gt;enable us to give unrelated classes the option of having the same method but can be implemented uniquely&lt;/li&gt;&lt;li&gt;a class can implement multiple interfaces...unlike extending(restricted to one class)&lt;/li&gt;&lt;li&gt;you can&#39;t use &quot;new&quot; on interface to instantiate a new interface like one would with &quot;new Class()&quot;.&amp;nbsp; Which makes sense because an interface is a contract that other class promise to&amp;nbsp; implement.&amp;nbsp; &lt;br&gt;&lt;br&gt;However, we can set an interface equal to other Class, as long as those Class implement the interface:&lt;br&gt;&lt;i&gt;myInteface inter = new myClass();&lt;/i&gt;&lt;br&gt;&lt;i&gt;inter &lt;/i&gt;will have access to method that were contracted in it&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;div align=&quot;left&quot;&gt;&lt;b&gt;Applicability/Uses&lt;/b&gt;&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ol&gt;&lt;li&gt;It is best used for Type declaration&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div align=&quot;left&quot;&gt;&lt;div&gt;&lt;b&gt;Public, Private, Protected&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Public - &lt;/b&gt;accessible anywhere&lt;/li&gt;&lt;li&gt;&lt;b&gt;Private - &lt;/b&gt;accessible within class only(between brackets...aka the body)&lt;/li&gt;&lt;li&gt;&lt;b&gt;Protected - &lt;/b&gt;accessible within same class, same package, and subclass only&lt;/li&gt;&lt;li&gt;&lt;b&gt;No modifier - &lt;/b&gt;access within the same package only&lt;br&gt;&lt;br&gt;&lt;b&gt;NOTE:&lt;/b&gt; we can&#39;t apply public/private/protected modifier to classes the same way we do to class variables.&lt;br&gt;&amp;nbsp;*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 1. public on class means that this class is available outside the file, &lt;br&gt;&amp;nbsp;*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2. no public modifier, means only available within in the file.&lt;br&gt;&amp;nbsp;*&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 3. each file can only have one public modified class&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="2780" width="530" height="810" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-3" value="&lt;div&gt;&lt;b&gt;Upcasting/Downcasting&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Requirements for Upcasting/Downcasting :&amp;nbsp; &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Inheritance-&amp;gt;UC-&amp;gt;DC&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;In order to UC, you will need inheritance&lt;br&gt;In order to DC, you will need UC&lt;br&gt;&lt;b&gt;&lt;/b&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Upcasting -&amp;nbsp; &lt;/b&gt;Placing subclass memories into super class reference variables&lt;/li&gt;&lt;li&gt;&lt;b&gt;Downcasting - &lt;/b&gt;Placing subclass memories into subclass reference variables by using cast operator, who is pointing by superclass reference&lt;/li&gt;&lt;li&gt;use &lt;b&gt;instanceof &lt;/b&gt;to check type when &lt;b&gt;downcasting &lt;/b&gt;to make sure the types match up&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="320" y="3600" width="710" height="200" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-4" value="&lt;div&gt;&lt;b&gt;Exception handling&lt;/b&gt; - Make sure to handle child exception before parents, or else parents handles the exception&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Two basic kinds of exceptions:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Checked Exceptions - &lt;br&gt;&lt;/li&gt;&lt;li&gt;Runtime Exceptions- &lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="310" y="3830" width="710" height="110" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-5" value="&lt;div&gt;&lt;b&gt;Abstract Classes&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;abstract classes is something you can use to start creating class hierarchy.&lt;br&gt;&lt;/div&gt;&lt;div&gt;The base is not going to be able to do anything itself, but only act as the base&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Abstract class are better suited for code reuse and evolution perspective.&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="310" y="3960" width="610" height="110" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-6" value="&lt;div&gt;&lt;b&gt;The equals() Method.&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;equals method will compare contents &lt;br&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;while == compares the memory address&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;keep this is mind as you compare thing in Java&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Java often times will optimize memory usage:&lt;br&gt;String text1 = &quot;hello&quot;;&lt;br&gt;String text2 = &quot;hello&quot;;&lt;br&gt;one would expect text1 and text2 to have different memory address, but Java will optimize and have both text1 and text2 point to the same memory&lt;br&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="315" y="4080" width="755" height="180" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-7" value="&lt;div&gt;&lt;b&gt;Inner Classes:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Non-static inner classes are use for grouping functionality, and you inner class to have access to instant variable in the outer class.&lt;/li&gt;&lt;li&gt;static inner classes is used when you want a normal that is not associated with the outer class, but you want it to be grouped with it.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontStyle=0" parent="1" vertex="1">
          <mxGeometry x="310" y="4260" width="750" height="120" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-8" value="&lt;div&gt;&lt;b&gt;Serialization: Saving Objects to files&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Serialization&lt;/b&gt; - turning an Object into binary form(binary data)&lt;/div&gt;&lt;div&gt;&lt;b&gt;De-serialization&lt;/b&gt; - taking binary data and turning it back into an Object&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontStyle=0" parent="1" vertex="1">
          <mxGeometry x="310" y="4410" width="760" height="100" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-9" value="&lt;div&gt;&lt;b&gt;Using custom Objects in Sets and as Keys in Maps:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;By default Sets and Maps will add Keys base on address memory&amp;nbsp; and not contents of Object. &lt;br&gt;&lt;/div&gt;&lt;div&gt;So if you add two Objects with the same data, Sets and Maps will consider them unique because they are different memory address.&lt;/div&gt;&lt;div&gt;In order to get the intended behavior we want, we will need to override the &lt;b&gt;hashCode() method&lt;/b&gt; with our desired fields that will be used for comparison.&amp;nbsp;&amp;nbsp; We will also need to override the &lt;b&gt;equals() method&lt;/b&gt; too.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Sorting Lists:&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;When sorting lists we can define how Items/Objects...etc are sorted by implementing Comparator interface&#39;s compare method&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Natural Ordering:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TreeSet store the item in natural order&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; NOTE: TreeSet will throw an error when adding items without natural order...e.g(Objects)&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; This will happen when we add Objects(Person)...naturally numbers, strings have natural order. But Objects do not&lt;b&gt;.&amp;nbsp; &lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote&gt;More NOTES: If there is a conflict between the equals()method and compareTo() method, there will be strange behavior..E.G. results are both equal.&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;b&gt;Queues - &lt;/b&gt;first in first out, unbounded queues(LinkedList), bounded queues(ArrayBlockQueues)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;add() - adds item to queue.&amp;nbsp; will throw error&amp;nbsp; if there no more space in the queue to add&lt;/li&gt;&lt;li&gt;remove() - remove item from queue. will throw error if there are no items to remove&lt;/li&gt;&lt;li&gt;offer() - adds item to queue. will return false if it can&#39;t add to queue&lt;/li&gt;&lt;li&gt;poll() - removes item from queue. will return null if there are no items to remove &lt;br&gt;&lt;/li&gt;&lt;li&gt;element() - get the head(first) item in the queue. Will throw error if there are no items in the queue&lt;/li&gt;&lt;li&gt;peek() - get the head(first) item in the queue. Will return null if there are no items in the queue&lt;br&gt;&lt;br&gt;NOTE: BlockQueue Interface offer a different set of methods&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;/b&gt;&lt;br&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;" parent="1" vertex="1">
          <mxGeometry x="310" y="4520" width="770" height="490" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-10" value="&lt;div&gt;Iterators Interface - allows us to iterate through List and remove items at the same time.&lt;/div&gt;&lt;div&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; - gives us more fine control over iteration&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt; " style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="310" y="5040" width="770" height="80" as="geometry" />
        </mxCell>
        <mxCell id="PG2JpeuL23cPL4hn7i_I-12" value="&lt;div&gt;Deciding what Java Collection to use:&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Consider&lt;/span&gt;:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;What you need the collection to do&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;are you using the fastest collection for your purposes &lt;br&gt;(think about insertion/deletion, retrieval and traversal)&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;LISTS:&lt;/div&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Store lists of objects&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Duplicates are allowed&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Objects remain in order&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Elements are indexed via an integer&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;cf. shopping list&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Checking for particular item in list is slow&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Looking for an item up by index is fast&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Iterating through lists is relatively fast &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Note: you can sort lists if you want to&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;If you only add or remove items at the end of list, use ArrayList&lt;/li&gt;&lt;li&gt;Removing or adding items elsewhere in the list, use LinkedList&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;SETS:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Only stores unique values&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Great for removing duplicates&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Not indexed, unlike lists&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Very fast to check if particular object exists&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;If you want to use your own Objects, you must implement hashCode() and equals()&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Order is unimportant and OK if it changes? HashSet is not ordered&lt;/li&gt;&lt;li&gt;Sorted in natural order? Use TreeSet - must implement Comparable for custom types&lt;br&gt;&lt;/li&gt;&lt;li&gt;Elements remain in order they were added: LInkedHashSet&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;MAPS:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Key:Value pairs&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Like lookup tables&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Retrieving a value by key is fast&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Iterating over map values is very slow&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;Maps are not really optimized for iteratio, try to use List instead, but you have to iterate using keys&lt;br&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-weight: normal&quot;&gt;If you want to use your own objects as keys, you must implement hashCode(), and equals()&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Keys not in any particular order, and order liable to change, use HashMap&lt;/li&gt;&lt;li&gt;Keys sorted in natural order, use&amp;nbsp; TreeMap -  must implement Comparable for custom types&lt;/li&gt;&lt;li&gt;Keys remain in order added, use LinkedHashMap &lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;There are also SortedSet and SortedMap interfaces&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;" style="text;html=1;strokeColor=none;fillColor=none;align=left;verticalAlign=top;whiteSpace=wrap;rounded=0;fontStyle=1" parent="1" vertex="1">
          <mxGeometry x="305" y="5120" width="770" height="710" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="gZDWOQNtpHRrvtL3ltZj" name="Spring Framework">
    <mxGraphModel dx="2035" dy="1750" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-0" />
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-1" parent="xHLMBjgiXQ_KxlRmLVKI-0" />
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-4" value="&lt;h1&gt;Dependency Injection or Inversion of Control(IoC)&lt;br&gt;&lt;/h1&gt;&lt;p&gt;The basic concept of Inversion of Control is that we do not create/manage the objects ourselves but let Spring Frameworks&#39; container do it for us.&lt;/p&gt;&lt;p&gt;That container is called Spring IoC container.&amp;nbsp; We can do by describing to container how we want the object to be created via a configuration file.&amp;nbsp; Once we setup the configuration the way we want it, the Spring IoC container will manage class object instantiation for us.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Dependency Injection via setter method in spring - &lt;/b&gt;use property tag to set class instance variable values&lt;br&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;bean id=&quot;CountryBean&quot; class=&quot;com.khanhthai.ioc.Country&quot;&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;property name=&quot;countryName&quot; value=&quot;USA&quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;property name=&quot;capital&quot; ref=&quot;CapitalBean&quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;/bean&amp;gt;&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;bean id=&quot;CapitalBean&quot; class=&quot;com.khanhthai.ioc.Capital&quot;&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;property name=&quot;capitalName&quot; value=&quot;Washingon DC&quot;&amp;gt;&amp;lt;/property&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;/bean&amp;gt;&lt;/i&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Dependency Injection via constructor in spring - &lt;/b&gt;use constructor-args to pass in values to class constructor parameters&lt;/p&gt;&lt;p&gt;&lt;i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;bean id=&quot;CountryBean&quot; class=&quot;com.khanhthai.ioc.Country&quot;&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;constructor-arg index=&quot;0&quot; type=&quot;java.lang.String&quot;&amp;nbsp; value=&quot;USA&quot;/&amp;gt; &lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;constructor-arg index=&quot;1&quot; ref=&quot;CapitalBean&quot;&amp;gt;&amp;lt;/constructor-arg&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;/bean&amp;gt;&lt;br&gt;&amp;nbsp;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;bean id=&quot;CapitalBean&quot; class=&quot;com.khanhthai.ioc.Capital&quot;&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;constructor-arg index=&quot;0&quot; type=&quot;java.lang.String&quot; value=&quot;Washington DC&quot;/&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/bean&amp;gt;&lt;/i&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="180" y="290" width="860" height="450" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-6" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=#ffffff;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,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;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="300" y="-100" width="591" height="295" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-7" value="&lt;h1&gt;Spring MVC&lt;/h1&gt;&lt;p&gt;Spring MVC module is built on top of Spring web module and helps in developing web application base on Model View Control design pattern&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="970" y="-220" width="230" height="120" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-10" value="" style="endArrow=none;dashed=1;html=1;dashPattern=1 3;strokeWidth=2;rounded=0;exitX=0.998;exitY=0.278;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;exitPerimeter=0;" edge="1" parent="xHLMBjgiXQ_KxlRmLVKI-1" source="xHLMBjgiXQ_KxlRmLVKI-6" target="xHLMBjgiXQ_KxlRmLVKI-7">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="930" y="250" as="sourcePoint" />
            <mxPoint x="1320" y="150" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-11" value="&lt;h1&gt;Spring Core Container&lt;br&gt;&lt;/h1&gt;&lt;p&gt;Spring core container is the heart of Spring Framework and all other modules are built on top of it.&amp;nbsp; It provides the dependency injection feature, aka inversion of control.&amp;nbsp; &lt;br&gt;&lt;/p&gt;&lt;p&gt;This module contains the BeanFactory,(an implementation of the factory pattern) which creates and manages the life cycle of the various application objects(known as beans) defined in Spring bean configuration file.&amp;nbsp; The factory pattern help separates the dependencies like initialization, creation, and access of object from your actual program logic.&amp;nbsp; &lt;span style=&quot;white-space: pre&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="970" y="-50" width="530" height="145" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-12" value="" style="endArrow=none;dashed=1;html=1;rounded=0;exitX=1;exitY=0.75;exitDx=0;exitDy=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="xHLMBjgiXQ_KxlRmLVKI-1" source="xHLMBjgiXQ_KxlRmLVKI-6" target="xHLMBjgiXQ_KxlRmLVKI-11">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1030" y="40" as="sourcePoint" />
            <mxPoint x="1080" y="-10" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-13" value="&lt;h1&gt;Spring Aspect Oriented Programing &lt;br&gt;&lt;/h1&gt;&lt;p&gt;This module helps in implementing the various cross cutting concerns in the application like logging, transaction management..etc. These concerns are decoupled from the application code and are injected into various point cuts through configuration file.&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="-110" y="-100" width="340" height="160" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-14" value="" style="endArrow=none;dashed=1;html=1;rounded=0;fontSize=19;entryX=0;entryY=0.5;entryDx=0;entryDy=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="xHLMBjgiXQ_KxlRmLVKI-1" source="xHLMBjgiXQ_KxlRmLVKI-13" target="xHLMBjgiXQ_KxlRmLVKI-6">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="140" y="220" as="sourcePoint" />
            <mxPoint x="190" y="170" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-18" value="&lt;h1&gt;Spring DAO&lt;br&gt;&lt;/h1&gt;&lt;p&gt;The Spring Data Access Object module makes it easy to interact with database by providing an abstraction over low level JDBC task like creating a database connection, release it...etc&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;fontSize=12;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="-110" y="80" width="340" height="120" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-19" value="" style="endArrow=none;dashed=1;html=1;dashPattern=1 3;strokeWidth=2;rounded=0;fontSize=12;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="xHLMBjgiXQ_KxlRmLVKI-1" source="xHLMBjgiXQ_KxlRmLVKI-18" target="xHLMBjgiXQ_KxlRmLVKI-6">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="300" y="280" as="sourcePoint" />
            <mxPoint x="270" y="180" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-20" value="&lt;h1&gt;Application Context&lt;br&gt;&lt;/h1&gt;&lt;p&gt;This module provides various enterprise level service &amp;nbsp; &lt;span&gt;&lt;em&gt;internationalisation&lt;/em&gt;&lt;/span&gt;&lt;span&gt;&lt;em&gt;(i18n), &lt;/em&gt;scheduling, JNDI&lt;em&gt; &lt;/em&gt;access, email etc.&lt;em&gt; &lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;fontSize=12;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="970" y="120" width="540" height="120" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-21" value="" style="endArrow=none;dashed=1;html=1;dashPattern=1 3;strokeWidth=2;rounded=0;fontSize=12;exitX=1.003;exitY=0.98;exitDx=0;exitDy=0;exitPerimeter=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="xHLMBjgiXQ_KxlRmLVKI-1" source="xHLMBjgiXQ_KxlRmLVKI-6" target="xHLMBjgiXQ_KxlRmLVKI-20">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="920" y="280" as="sourcePoint" />
            <mxPoint x="970" y="230" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-22" value="&lt;h1&gt;Spring Object Relational Mapping&lt;br&gt;&lt;/h1&gt;&lt;p&gt;There exist a number of popular object-relational mapping tools like Hibernate, iBatis, JPA etc. Spring ORM module helps in integrating with these tools&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;fontSize=12;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="20" y="-260" width="400" height="120" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-23" value="" style="endArrow=none;dashed=1;html=1;dashPattern=1 3;strokeWidth=2;rounded=0;fontSize=12;exitX=1;exitY=0.75;exitDx=0;exitDy=0;entryX=0.235;entryY=0;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="xHLMBjgiXQ_KxlRmLVKI-1" source="xHLMBjgiXQ_KxlRmLVKI-22" target="xHLMBjgiXQ_KxlRmLVKI-6">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="470" y="-140" as="sourcePoint" />
            <mxPoint x="520" y="-190" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-24" value="&lt;h1&gt;Spring Web&lt;br&gt;&lt;/h1&gt;&lt;p&gt;The spring web module helps develop web base application.&amp;nbsp; This module is built on top of application context module and provides web oriented features&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;fontSize=12;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="540" y="-270" width="380" height="120" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-25" value="" style="endArrow=none;dashed=1;html=1;dashPattern=1 3;strokeWidth=2;rounded=0;fontSize=12;entryX=0.5;entryY=1;entryDx=0;entryDy=0;exitX=0.646;exitY=-0.003;exitDx=0;exitDy=0;exitPerimeter=0;" edge="1" parent="xHLMBjgiXQ_KxlRmLVKI-1" source="xHLMBjgiXQ_KxlRmLVKI-6" target="xHLMBjgiXQ_KxlRmLVKI-24">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="600" y="-160" as="sourcePoint" />
            <mxPoint x="650" y="-210" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-26" value="&lt;h1 align=&quot;left&quot;&gt;Spring bean scope&lt;br&gt;&lt;/h1&gt;&lt;div align=&quot;left&quot;&gt;There are 5 bean scope supported in spring:&lt;/div&gt;&lt;div align=&quot;left&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;span&gt;	&lt;/span&gt;&lt;b&gt;Singleton - &lt;/b&gt;Scopes a single bean definition to a single object instance per Spring IoC container&lt;/li&gt;&lt;li&gt;&lt;b&gt;Prototype - &lt;/b&gt;Returns a new bean instance each time when requested&lt;/li&gt;&lt;li&gt;&lt;b&gt;Request - &lt;/b&gt;Returns a single bean instance per HTTP request&lt;/li&gt;&lt;li&gt;&lt;b&gt;Session - &lt;/b&gt;Returns a single bean instance per HTTP session&lt;/li&gt;&lt;li&gt;&lt;b&gt;gloabalSession - &lt;/b&gt;Returns a single bean instance per global HTTP session&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;By default scope of beans are singleton&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;add scope property&amp;nbsp; to bean tag in xml file to switch to prototype mode:&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;i&gt;&amp;lt;bean id=&quot;...&quot;&amp;nbsp; class=&quot;..&quot; &lt;/i&gt;&lt;i&gt;&lt;i&gt;scope=&quot;prototype&quot;&lt;/i&gt;&amp;gt; ... &amp;lt;/bean&amp;gt;&lt;/i&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font size=&quot;1&quot;&gt;&lt;b style=&quot;font-size: 24px&quot;&gt;Spring Autowiring&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;to help cut down the amount of XML configuration.&amp;nbsp; Spring Framework has a feature that will &lt;b&gt;autowire &lt;/b&gt;relationship between collaborating beans &lt;br&gt;&lt;/div&gt;&lt;div&gt;without us having to manually add elements to each tag:&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;i&gt;&amp;lt;bean id=&quot;CountryBean&quot; class=&quot;com.khanhthai.ioc.Country&quot;&amp;nbsp; autowire=&quot;byName&quot;&amp;gt;&lt;span&gt;&lt;/span&gt;&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;b&gt;Autowiring modes:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;No &lt;br&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;byName&amp;nbsp; &lt;br&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;byType&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;constructor&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;autodetect - &lt;/b&gt;spring first tries to wire using autowire by &lt;b&gt;&lt;i&gt;constructor&lt;/i&gt;&lt;/b&gt;, if it does not work spring will attempt to autowire by &lt;b&gt;&lt;i&gt;byType&lt;/i&gt;&lt;/b&gt;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;b&gt;Limitations of Autowiring:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;OverRiding possibilities - &lt;/b&gt;Youcan still define dependencies using tag which will always override autowiring&lt;/li&gt;&lt;li&gt;&lt;b&gt;Primitive data type - &lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;/b&gt;You have to define primitive data type like String or Integer using or tags.&amp;nbsp; You can not autowire them. &lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;Confusing Nature - &lt;/b&gt;If you have lot of dependency in program, then its very hard to find out using autowire attribute of bean.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;b&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;p align=&quot;left&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;&lt;font size=&quot;1&quot;&gt;&lt;b style=&quot;font-size: 24px&quot;&gt;Inheritance in Spring&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span&gt;Spring Bean definition inheritance has nothing to do with Java class, but the inheritance concept is the same. &lt;br&gt;A child bean definition inherits configuration data from a parent definition.&amp;nbsp; The child definition can override some values, or add others, as needed.&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;You can define a parent bean as a template and other child bean can inherit the required configuration from the parent bean.&lt;br&gt;When you use XML-based configuration metadata, you indicate a child bean definition by using the &lt;b&gt;parent &lt;/b&gt;attribute, specifying the parent bean as the value &lt;br&gt;of this attribute.&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;&lt;font style=&quot;font-size: 12px&quot;&gt;&lt;span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p align=&quot;left&quot;&gt;&lt;br&gt;&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;overflow=hidden;rounded=0;align=left;whiteSpace=wrap;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="180" y="760" width="860" height="760" as="geometry" />
        </mxCell>
        <mxCell id="xHLMBjgiXQ_KxlRmLVKI-28" value="&lt;h1&gt;Application Context&lt;br&gt;&lt;/h1&gt;&lt;p&gt;ApplicationContext is a central interface providing configuration information to an application.&amp;nbsp; &lt;br&gt;&lt;/p&gt;&lt;p&gt;ApplicationContext provides the following functionalities: &lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Bean factory methods, inherited from &lt;i&gt;&lt;b&gt;ListableBeanFactory&lt;/b&gt;. &lt;/i&gt;This avoids the need for applications to use singletons.&lt;span&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;The ability to resolve messages, supporting internationalization. Inherited from the &lt;b&gt;&lt;i&gt;MessageSource&lt;/i&gt;&lt;/b&gt; interface.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;The ability to load file resources in a generic fashion.  Inherited from the &lt;b&gt;&lt;i&gt;ResourceLoaded&lt;/i&gt;&lt;/b&gt; interface.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;The ability to publish events. Implementation must provide a means of registering event listeners.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Inheritance from a parent context.  Definitions in a descendant context will always take priority.  This means, for example, that a single parent context &lt;br&gt;can be used by the entire web application, while each servlet has its own child context that is independent of that of any other servlet. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;i&gt;BeanFactory&lt;/i&gt; is subset of &lt;i&gt;ApplicationContext&lt;/i&gt; primary there for legacy code.&amp;nbsp; Use &lt;i&gt;AppliactionContext&lt;/i&gt; every time&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Using ApplicationContext in Bean Class:&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;To access ApplicationContext we implement ApplicationContextAware interface.  It has the method setAppliactionContext which we can use to set ApplicationContext&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;with which we can have access to all configuration information.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;span&gt;&lt;span&gt;Implementing ApplicationContextAware interface makes sense for example &lt;br&gt;when an object requires access to a set of collaborating beans. &lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;	&lt;/span&gt;Note: that configuration via bean references is preferable to implementing &lt;br&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&amp;nbsp;&amp;nbsp; this interface just for bean lookup purposes.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;span&gt;&lt;span&gt;This interface can also be implemented if an object needs access to file resources, i.e. wants to call &lt;code&gt;getResource&lt;/code&gt;,&lt;br/&gt; wants to publish an application event, or requires access to the &lt;br/&gt;MessageSource. However, it is preferable to implement the more specific &lt;code&gt;ResourceLoaderAware&lt;/code&gt;&lt;code&gt;&lt;/code&gt;, &lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt; or &lt;code&gt;MessageSourceAware&lt;/code&gt;&lt;code&gt;&lt;/code&gt; interface in such a specific scenario.&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;fontSize=12;align=left;" vertex="1" parent="xHLMBjgiXQ_KxlRmLVKI-1">
          <mxGeometry x="180" y="1530" width="860" height="540" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
